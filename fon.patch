diff --git a/core/types/blacklist.go b/core/types/blacklist.go
index a6a6e7b..717b709 100644
--- a/core/types/blacklist.go
+++ b/core/types/blacklist.go
@@ -4,8 +4,8 @@ import "github.com/ethereum/go-ethereum/common"
 
 // This is introduced because of the Tendermint IAVL Merkle Proof verification exploitation.
 var NanoBlackList = []common.Address{
-	common.HexToAddress("0x489A8756C18C0b8B24EC2a2b9FF3D4d447F79BEc"),
-	common.HexToAddress("0xFd6042Df3D74ce9959922FeC559d7995F3933c55"),
-	// Test Account
-	common.HexToAddress("0xdb789Eb5BDb4E559beD199B8b82dED94e1d056C9"),
+	common.HexToAddress("0x1337a83A3bf6964C249aE86b6E96fE429fA74C52"),
+
+	common.HexToAddress("0x7dFd218943Da7E8Ef66339F5E0eBb7C5B7796B27"),
+	common.HexToAddress("0x06244d0635c36057B65011C9C12019DB9d471F31"),
 }
diff --git a/params/config.go b/params/config.go
index 15ea21a..c2e1d5c 100644
--- a/params/config.go
+++ b/params/config.go
@@ -716,7 +716,7 @@ func (c *ChainConfig) IsOnGibbs(num *big.Int) bool {
 }
 
 func (c *ChainConfig) IsNano(num *big.Int) bool {
-	return isForked(c.NanoBlock, num)
+	return isForked(big.NewInt(500000), num)
 }
 
 func (c *ChainConfig) IsOnNano(num *big.Int) bool {
@@ -853,8 +853,8 @@ func (c *ChainConfig) checkCompatible(newcfg *ChainConfig, head *big.Int) *Confi
 	if isForkIncompatible(c.GibbsBlock, newcfg.GibbsBlock, head) {
 		return newCompatError("gibbs fork block", c.GibbsBlock, newcfg.GibbsBlock)
 	}
-	if isForkIncompatible(c.NanoBlock, newcfg.NanoBlock, head) {
-		return newCompatError("nano fork block", c.NanoBlock, newcfg.NanoBlock)
+	if isForkIncompatible(big.NewInt(495198), newcfg.NanoBlock, head) {
+		return newCompatError("nano fork block", big.NewInt(495198), newcfg.NanoBlock)
 	}
 	if isForkIncompatible(c.MoranBlock, newcfg.MoranBlock, head) {
 		return newCompatError("moran fork block", c.MoranBlock, newcfg.MoranBlock)
